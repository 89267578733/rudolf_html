import { difficulties } from '../utils/taskGenerator';

export default class MainMenuScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MainMenuScene' });
    }

    preload() {
        this.load.audio('menu-music', 'assets/menu-music.mp3');
        this.load.image('play', 'assets/play.png');
    }

    create() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω
        this.add.image(400, 300, 'menu-bg').setScale(0.8).setAlpha(0.9);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.nameInput = document.createElement('input');
        this.nameInput.type = 'text';
        this.nameInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞...';
        this.nameInput.style.position = 'absolute';
        this.nameInput.style.left = '50%';
        this.nameInput.style.top = '50%';
        this.nameInput.style.transform = 'translate(-50%, -50%)';
        this.nameInput.style.width = '300px';
        this.nameInput.style.height = '40px';
        this.nameInput.style.fontSize = '20px';
        this.nameInput.style.textAlign = 'center';
        this.nameInput.style.border = '2px solid #fff';
        this.nameInput.style.borderRadius = '5px';
        this.nameInput.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        this.nameInput.style.color = '#fff';
        this.nameInput.style.outline = 'none';
        this.nameInput.style.transition = 'all 0.3s ease';
        this.nameInput.style.setProperty('::placeholder', 'color: #fff !important');
        this.nameInput.style.fontFamily = 'Tektur';
        document.body.appendChild(this.nameInput);
        this.nameInput.focus();

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
        const buttonRadius = 25;
        const buttonX = 400 + 200; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–±—ã–ª–æ 180)
        const buttonY = 300; // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const buttonGraphics = this.add.graphics();
        buttonGraphics.clear();
        buttonGraphics.lineStyle(2, 0xffffff); // –¢–æ–ª—å–∫–æ –±–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞
        buttonGraphics.fillStyle(0x333333);
        buttonGraphics.fillCircle(buttonX, buttonY, buttonRadius);
        buttonGraphics.strokeCircle(buttonX, buttonY, buttonRadius);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
        const generateButton = this.add.text(buttonX, buttonY, 'üé≤', {
            fontSize: '24px',
            fill: '#fff',
            fontFamily: 'Tektur'
        }).setOrigin(0.5);

        // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        const buttonZone = this.add.zone(buttonX, buttonY, buttonRadius * 2, buttonRadius * 2)
            .setOrigin(0.5)
            .setInteractive();

        buttonZone.on('pointerover', () => {
            buttonGraphics.clear();
            buttonGraphics.lineStyle(2, 0xffffff); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–≤–æ–¥–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            buttonGraphics.fillStyle(0x444444);
            buttonGraphics.fillCircle(buttonX, buttonY, buttonRadius);
            buttonGraphics.strokeCircle(buttonX, buttonY, buttonRadius);
            generateButton.setScale(1.1);
        });

        buttonZone.on('pointerout', () => {
            buttonGraphics.clear();
            buttonGraphics.lineStyle(2, 0xffffff); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–≤–æ–¥–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            buttonGraphics.fillStyle(0x333333);
            buttonGraphics.fillCircle(buttonX, buttonY, buttonRadius);
            buttonGraphics.strokeCircle(buttonX, buttonY, buttonRadius);
            generateButton.setScale(1);
        });

        buttonZone.on('pointerdown', () => {
            const names = [
                '–ö–∏—Ç—è—Ä–∞',
                '–°–∏–≥–º–∞-–ö–∏—Ç',
                '–ú–æ–±–∏ –î–∏–∫',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å',
                '–ö–∏—Ç-–ì–∏–≥–∞—á–∞–¥',
                '–ö–∏—Ç-–ê–ª—å—Ñ–∞',
                '–ö–∏—Ç-–û–º–µ–≥–∞',
                '–ö–∏—Ç-–õ–µ–≥–µ–Ω–¥–∞',
                '–ö–∏—Ç-–ú–∞—Å—Ç–µ—Ä',
                '–ö–∏—Ç-–ë–æ—Å—Å',
                '–ö–∏—Ç-–¢–∏—Ç–∞–Ω',
                '–ö–∏—Ç-–í–ª–∞—Å—Ç–µ–ª–∏–Ω',
                '–ö–∏—Ç-–ò–º–ø–µ—Ä–∞—Ç–æ—Ä',
                '–ö–∏—Ç-–ö–æ—Ä–æ–ª—å',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –º–æ—Ä–µ–π',
                '–ö–∏—Ç-–í–µ–ª–∏–∫–∏–π',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤–æ–ª–Ω',
                '–ö–∏—Ç-–•—Ä–∞–Ω–∏—Ç–µ–ª—å',
                '–ö–∏—Ç-–ó–∞—â–∏—Ç–Ω–∏–∫',
                '–ö–∏—Ç-–ú—É–¥—Ä–µ—Ü',
                '–ö–∏—Ç-–í–æ–∏–Ω',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≥–ª—É–±–∏–Ω',
                '–ö–∏—Ç-–°—Ç—Ä–∞–Ω–Ω–∏–∫',
                '–ö–∏—Ç-–ò—Å–∫–∞—Ç–µ–ª—å',
                '–ö–∏—Ç-–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —Ç–µ—á–µ–Ω–∏–π',
                '–ö–∏—Ç-–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–∞–π–Ω',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —Å—Ç–∏—Ö–∏–π',
                '–ö–∏—Ç-–í–ª–∞–¥—ã–∫–∞ –æ–∫–µ–∞–Ω–∞',
                '–ö–∏—Ç-–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏–ª–∏–≤–æ–≤'
            ];
            const randomName = names[Math.floor(Math.random() * names.length)];
            this.nameInput.value = randomName;
            this.updateStartButtonState();
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–≤–∏–¥–∏–º–∞)
        this.startButton = this.add.image(400, 400, 'play').setInteractive().setVisible(false);
        this.startButton.setScale(0.167); // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ 3 —Ä–∞–∑–∞

        this.startButton.on('pointerover', () => {
            this.startButton.setScale(0.183); // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        });

        this.startButton.on('pointerout', () => {
            this.startButton.setScale(0.167); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        });

        this.startButton.on('pointerdown', () => {
            if (this.nameInput.value.trim() === '') {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ!');
                return;
            }
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            if (this.sound.get('menu-music')) {
                this.sound.get('menu-music').stop();
            }
            this.scene.start('GameScene', { 
                playerName: this.nameInput.value,
                currentDifficulty: difficulties[0] // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ input –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
        this.events.on('shutdown', this.shutdown, this);
        this.events.on('destroy', this.shutdown, this);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
        this.nameInput.addEventListener('input', () => this.updateStartButtonState());
        this.updateStartButtonState();

        // --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---
        this.selectedButtonIndex = 0; // 0 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, 1 - —Å—Ç–∞—Ä—Ç
        const buttons = [buttonZone, this.startButton];
        const highlightButton = (idx) => {
            if (idx === 0) {
                buttonGraphics.clear();
                buttonGraphics.lineStyle(2, 0xffffff); // —Ç–æ–ª—å–∫–æ –±–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞
                buttonGraphics.fillStyle(0x444444);
                buttonGraphics.fillCircle(buttonX, buttonY, buttonRadius);
                buttonGraphics.strokeCircle(buttonX, buttonY, buttonRadius);
                generateButton.setScale(1.2);
                this.startButton.setScale(0.167);
            } else {
                buttonGraphics.clear();
                buttonGraphics.lineStyle(2, 0xffffff);
                buttonGraphics.fillStyle(0x333333);
                buttonGraphics.fillCircle(buttonX, buttonY, buttonRadius);
                buttonGraphics.strokeCircle(buttonX, buttonY, buttonRadius);
                generateButton.setScale(1);
                this.startButton.setScale(0.183);
            }
        };
        highlightButton(this.selectedButtonIndex);
        this.input.keyboard.on('keydown-UP', () => {
            this.selectedButtonIndex = (this.selectedButtonIndex + buttons.length - 1) % buttons.length;
            highlightButton(this.selectedButtonIndex);
        });
        this.input.keyboard.on('keydown-DOWN', () => {
            this.selectedButtonIndex = (this.selectedButtonIndex + 1) % buttons.length;
            highlightButton(this.selectedButtonIndex);
        });
        this.input.keyboard.on('keydown-ENTER', () => {
            if (this.selectedButtonIndex === 0) {
                buttonZone.emit('pointerdown');
            } else {
                this.startButton.emit('pointerdown');
            }
        });
        this.input.keyboard.on('keydown-RETURN', () => {
            if (this.selectedButtonIndex === 0) {
                buttonZone.emit('pointerdown');
            } else {
                this.startButton.emit('pointerdown');
            }
        });
    }

    updateStartButtonState() {
        const hasName = this.nameInput.value.trim() !== '';
        this.startButton.setVisible(hasName);
    }

    shutdown() {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
        if (this.nameInput) {
            this.nameInput.remove();
        }
    }
} 